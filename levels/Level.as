package src.punks.levels {	import flash.display.MovieClip;	import flash.events.*;	import flash.display.BlendMode;	import src.core.Game;	import src.punks.PunksGame;	import src.punks.HUD;	import src.punks.Lanes;	import src.punks.Fireworks;	import flash.display.Shape;		import flash.display.GradientType;	import flash.geom.Matrix;	import flash.display.Shape;	import flash.geom.ColorTransform;	import flash.display.Sprite;			//import src.shooter.Player;	//import src.shooter.Obstacle;	public class Level extends MovieClip{						var counter:int = 0;		var levelLength:int = 4320; //in frames.  1 minutes = 1440 @ 24fps		public var allowedEnemies:int = 5;		public var landedEnemies:int = 0;		public var bottomLayer = new MovieClip();		public var middleLayer = new MovieClip();		public var topLayer = new MovieClip();		public static var _flash:Shape;				var lanes:Lanes;				//Sky vars		var skyGrad:Shape = new Shape();		var duskAmount = -255;		var lightAmount = 50;		var stars:Sprite = new Sprite();		public function Level(){			//Visual			//Sky			graphics.beginFill(0x000033);			graphics.drawRect(0,0,480,640)			graphics.endFill();			var skyMatrix = new Matrix();			skyMatrix.createGradientBox(480,640,90*Math.PI/180 );			skyGrad.graphics.beginGradientFill( GradientType.LINEAR, [0xbbbbbb, 0xbbbbbb], [0, 0.2], [0,255], skyMatrix );			skyGrad.graphics.drawRect(0,0,480,640)			skyGrad.graphics.endFill();			addChild(skyGrad);			skyGrad.blendMode = BlendMode.LIGHTEN;			addChild(bottomLayer);			addChild(middleLayer);			addChild(topLayer);									lanes = new Lanes();			lanes.x = 0;			lanes.y = 0;			bottomLayer.addChild(lanes);			//Stars			bottomLayer.addChild(stars);			stars.alpha = 0.1;						var star;			for ( var s:int=0; s<250; s++){				star = new Shape;				star.graphics.beginFill(0xffffff, Math.random() ); //rando "brightness"				var _rad = Math.random() * 2.5;				star.graphics.drawRect(0,0, _rad, _rad );				star.graphics.endFill();				star.x = Math.random() * 480;				star.y = Math.random() * 400;				stars.addChild(star);							}									_flash = new Shape();			_flash.graphics.beginFill(0xffffff, 0.25);			_flash.graphics.drawRect(0,0,480,570)			_flash.graphics.endFill();			_flash.blendMode = BlendMode.OVERLAY;			_flash.visible = false;			bottomLayer.addChild(_flash);									//Deactivate Fireworks			for (var f:int=0; f<Fireworks.list.length; f++){				Fireworks.list[f].active = false;			}									addEventListener(Event.ADDED_TO_STAGE, waitForAdded,false,0,true);					}				function waitForAdded(e:Event){			addEventListener(Event.ENTER_FRAME, onFrame,false,0,true);			removeEventListener(Event.ADDED_TO_STAGE, waitForAdded);					}		function onFrame(e:Event){			_flash.visible = false;			if ( Game.isPaused != true ){								if ( landedEnemies >= allowedEnemies){					loseLevel();				}								counterTrigger();				counter++;			}						if ( counter >= levelLength && PunksGame.enemyList.length == 0){				levelComplete();			}						}						public function exitTrigger(){						removeEventListener(Event.ENTER_FRAME, onFrame);						//Delete everything in the level			while ( bottomLayer.numChildren > 0 ){				var child = this.bottomLayer.getChildAt(0);				if ( child.hasOwnProperty("remove") ){					child.remove();					child = null;				}				else{					//trace("child: " + this.getChildAt(0) + " removed");					Game.remove(this.bottomLayer.getChildAt(0));									}			}			while ( middleLayer.numChildren > 0 ){				var child2 = this.middleLayer.getChildAt(0);				if ( child2.hasOwnProperty("remove") ){					child2.remove();					child2 = null;				}				else{					//trace("child: " + this.getChildAt(0) + " removed");					Game.remove(this.middleLayer.getChildAt(0));									}			}			while ( topLayer.numChildren > 0 ){				var child3 = this.topLayer.getChildAt(0);				if ( child3.hasOwnProperty("remove") ){					child3.remove();					child3 = null;				}				else{					//trace("child: " + this.getChildAt(0) + " removed");					Game.remove(this.topLayer.getChildAt(0));									}			}			while ( numChildren > 0 ){				var child4 = this.getChildAt(0);				if ( child4.hasOwnProperty("remove") ){					child4.remove();					child4 = null;				}				else{					//trace("child: " + this.getChildAt(0) + " removed");					Game.remove(this.getChildAt(0));									}			}					}				function counterTrigger(){						//Day/Night Cycle			if ( counter < 500 ){				skyGrad.transform.colorTransform = new ColorTransform(1,1,1,1, duskAmount, 0,0, lightAmount);				lightAmount -= 0.1;				if ( stars.alpha < 1){					stars.alpha += 0.005;				}								//trace(stars.alpha);			}			else if ( counter > levelLength - 500 ){				skyGrad.transform.colorTransform = new ColorTransform(1,1,1,1, duskAmount, 0,0, lightAmount);				lightAmount += 0.1;				duskAmount += 1;				if ( stars.alpha > 0.2 ){					stars.alpha -= 0.005;				}			}					}		function levelComplete(){						//Game.isPaused = true;						trace("Level is over");						removeEventListener(Event.ENTER_FRAME, onFrame);						//TODO replace with function			PunksGame.gameRef.winBox.visible = true;		}				function loseLevel(){						//Game.isPaused = true;						trace("You Lose");						removeEventListener(Event.ENTER_FRAME, onFrame);			//TODO replace with function			PunksGame.gameRef.loseBox.visible = true;		}	}}
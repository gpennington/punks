package src.punks {	import flash.display.MovieClip;	import flash.events.Event;	import flash.text.TextField;	import flash.system.System;	import flash.media.SoundMixer;	import src.core.Input;	import src.core.Game;	import src.core.Settings;	import flash.display.Shape;	//TODO	//HIGH	//Add enemies types	//How do you lose? What are the enemies after?	//Add add sound to launchers	//Add Game menu interfaces	//LOW	//Standardize the gravity and inertia bidness	//Make all layers, HUD, Lanes, Level, Game, the same size: 480x640	//Fireworks - needs "permanent" property and parameter (can't be removed)	//Add "_type" as Launcher param	//Attache upgrade panel mouse event to hitBox	public class PunksGame extends MovieClip{		public static var gameRef;		var level;		//input class		var input:Input;		//Meta Info		public static var isPaused:Boolean = false;		public static var currentLevel = new MovieClip();		//Custom Game Layers		var hud:HUD;		public var loseBox:LoseBox;		public var winBox:WinBox;				//Dynamic Assets - to do hit checks against or to limit the number of items in play		public static var enemyList:Array = new Array();		public static var starList:Array = new Array();		public static var slotList:Array = new Array(15);		//public static var landedList:Array = new Array();		public static var rockList:Array = new Array();						//Music		//var s_musicLevel:MusicLevel = new MusicLevel();		//var s_musicBoss:MusicBoss = new MusicBoss();		//var s_musicBoss2:MusicBoss2 = new MusicBoss2();		public function PunksGame(_level){					level = _level;			super();						addEventListener(Event.ADDED_TO_STAGE, waitForAdded);					}//game				private function waitForAdded(e:Event):void	{			gameRef = this;			removeEventListener(Event.ADDED_TO_STAGE, waitForAdded);			//addEventListener(Event.ENTER_FRAME, onFrame, false, 0, true);			//Add input class			input = new Input();			addChild(input);			//Add Game Layers						//Level Placeholder			currentLevel = new Shape();			addChildAt(currentLevel,0);			loadLevel(level, false);						//Interface			hud = new HUD();			hud.x = 0;			hud.y = 0;			addChild(hud);						//Win/Lose boxes			winBox = new  WinBox();			addChild(winBox);			winBox.visible = false;						loseBox = new LoseBox();			addChild(loseBox);			loseBox.visible = false;			//super.waitForAdded(e);		}						public function loadLevel(level, stageComplete){			//super.loadLevel(level, stageComplete);			//Old Level			removeChild(currentLevel);			currentLevel = null;			//Load Map			//					 = new LevelX(x,y,direction);			switch (level){				case "level0":					import src.punks.levels.Level0;					currentLevel = new Level0();					break;				case "level1":					import src.punks.levels.Level1;					currentLevel = new Level1();					break;			}			addChildAt(currentLevel,0);			if ( stageComplete) {				pauseGame();				//um.h1.text = "Stage Complete!";			}		}				public function pauseGame(){			if(isPaused){				isPaused = false;				//um.visible = false;			}			else{				isPaused = true;				//um.visible = true;				//um.h1.text = "Paused";			}		}				public function remove(){						removeChild(hud);			hud = null;									removeChild(winBox);			winBox = null;			removeChild(loseBox);			loseBox = null						currentLevel.exitTrigger();			removeChild(currentLevel);			currentLevel = null;						enemyList = [];			starList = [];			slotList = [,,,,,,,,,,,,,,,];			rockList = [];					}				public function reset(){			//			removeChild(hud);//			hud = null;//						//			removeChild(winBox);//			winBox = null;//			removeChild(loseBox);//			loseBox = null						currentLevel.exitTrigger();			//removeChild(currentLevel);			//currentLevel = null;						enemyList = [];			starList = [];			slotList = [,,,,,,,,,,,,,,,];			rockList = [];					}	}}
		package src.punks {	import flash.display.MovieClip;	import flash.display.Shape;	import flash.events.*	import src.core.Game;	import flash.display.Sprite;	import flash.geom.Point;	public class Lanes extends MovieClip{		//static var slots:Array = [];		static var slotPositions:Array = []; 		static var lanesRef;		public function Lanes(){			lanesRef = this;			//slots.length = _numSlots;			//Positions			//Points at which fireworks snap to			for ( var i:int=0; i<PunksGame.slotList.length; i++){				if ( i<8){					//slotPositions.push(new Point( 30 + (i*60), -90 ));					slotPositions.push(new Point( 30 + (i*60), 520 ));				}				else{					slotPositions.push(new Point( 60 + (i*60) - 480, 495 ));				}			}			slotPositions[0].y -= 0;			slotPositions[1].y -= 2;			slotPositions[2].y -= 4;			slotPositions[3].y -= 6;			slotPositions[4].y -= 6;			slotPositions[5].y -= 4;			slotPositions[6].y -= 2;			slotPositions[7].y -= 0;						slotPositions[8].y -= 0;			slotPositions[9].y -= 2;			slotPositions[10].y -= 4;			slotPositions[11].y -= 6;			slotPositions[12].y -= 4;			slotPositions[13].y -= 2;			slotPositions[14].y -= 0;						//Placement dots			for ( var s:int=0; s<PunksGame.slotList.length; s++){											var dot:Sprite = new Sprite();				dot.graphics.beginFill(0x000000, 0.25);				dot.graphics.drawCircle(0,0,6);				dot.graphics.endFill();				dot.x = slotPositions[s].x;				dot.y = slotPositions[s].y;				dot.scaleY = 0.8;				//trace(slotPositions[s].x)				addChild(dot);			}//			var slotMarkers = new Sprite();//			addChild(slotMarkers);			//Stage Listeners			addEventListener(Event.ADDED_TO_STAGE, waitForAdded);			function waitForAdded(e:Event):void	{				removeEventListener(Event.ADDED_TO_STAGE, waitForAdded);				addEventListener(Event.ENTER_FRAME, onFrame);				//				for ( var s:int=0; s<=slots.length; s++){//					//					slotMarkers.graphics.lineStyle(1,0x000000, 0.2);//					//slotMarkers.graphics.moveTo( (480/slots.length) * s + ((-5 * s) + 20) , 0); //perspective lines//					slotMarkers.graphics.moveTo( (480/slots.length) * s, 0);//					slotMarkers.graphics.lineTo( (480/slots.length) * s, 70);//					//trace("line");//					//				}							}		}		public function onFrame(e:Event){			if ( Game.isPaused != true ){			}		}//onframe		public static function nearLane(){			//I could do this with hit tests, too?			var index;			slotPositions.forEach(function(spot, _index){				if ( PunksGame.slotList[_index] == undefined && Math.abs(lanesRef.mouseX - spot.x) < 20 && Math.abs(lanesRef.mouseY - spot.y) < 20 ){					index = _index;				}			});						return index;		}						public static function buyFirework(which, where){						switch (which){				case "shell":									var sl:ShellLauncher;							sl = new ShellLauncher(Player, 1);					PunksGame.currentLevel.middleLayer.addChild(sl);					sl.x = Lanes.slotPositions[where].x;					sl.y = Lanes.slotPositions[where].y;															PunksGame.slotList[where] = sl;										break;				case "rocket":					var rl:RocketLauncher;							rl = new RocketLauncher(Player, 1);					PunksGame.currentLevel.middleLayer.addChild(rl);					rl.x = Lanes.slotPositions[where].x;					rl.y = Lanes.slotPositions[where].y;															PunksGame.slotList[where] = rl;										break;				case "fountain":					var fl:FountainLauncher;							fl = new FountainLauncher(Player, 1);					PunksGame.currentLevel.middleLayer.addChild(fl);					fl.x = Lanes.slotPositions[where].x;					fl.y = Lanes.slotPositions[where].y;															PunksGame.slotList[where] = fl;										break;									case "maroon":					var ml:MaroonLauncher;							ml = new MaroonLauncher(Player, 1);					PunksGame.currentLevel.middleLayer.addChild(ml);					ml.x = Lanes.slotPositions[where].x;					ml.y = Lanes.slotPositions[where].y;															break;									case "m80":					trace("bought m80");															break;									case "starcatcher":					var sc:StarCatcher;							sc = new StarCatcher(Player, 1);					PunksGame.currentLevel.middleLayer.addChild(sc);					sc.x = Lanes.slotPositions[where].x;					sc.y = Lanes.slotPositions[where].y;										PunksGame.slotList[where] = sc;										break;									case "delete":					if ( PunksGame.slotList[where] ){						PunksGame.slotList[where].remove();						PunksGame.slotList[where] = null;					}										break;			}						//Purchase			Player.stars -= Fireworks.list[Fireworks.getIndex(which)].price[0];			//Reload			//HUD.buttons[Fireworks.getIndex(which)].timerMask.visible = true;			//Fireworks.list[Fireworks.getIndex(which)].ready = false;		}			}}
package src.punks {	//import flash.filters.GlowFilter;	import src.core.Game;	import src.punks.levels.Level;		public class Shell extends Projectile{				var spark:Spark;		var numSpark;				var sound_shell:SoundShell = new SoundShell();		public function Shell(_shooter){			shooter = _shooter;			angle = 0;			speed = 8 + ( Math.random() * 2);			damage = 10;			super(_shooter, angle, speed, damage);			numSpark = ( shooter.level ) * 12; //  Math.pow(2,3 + shooter.level); //8,16,32,64,128,...			inertia = ( Math.random() * 0.3 ) - 0.15;			life = 200;			friendly = shooter.friendly;						//Visual			graphics.beginFill( 0xffffff, 0.75);			graphics.drawCircle(0,0,1.5 + shooter.level/10); //gets bigger per level			graphics.endFill();			//var glow:GlowFilter = new GlowFilter(0xffffaa, 1, 6, 6, 3);			//filters = [glow];		}		override public function behavior():void{			super.behavior();						var particle:Particle;			for ( var p:int=0; p<3; p++){				particle = new Particle();				particle.x = x;// + ( Math.random() * 6 ) - 3;				particle.y = y + ( Math.random() * 6 ) - 3;				PunksGame.currentLevel.topLayer.addChild(particle);			}						if ( speedY < -2 && stillMoving ){				kill();				stillMoving = false;			}		}		override public function move(){						super.move()									//speed x radians			y += speedY * Math.sin((angle - 90) * (Math.PI / 180));			x += speedX * Math.cos((angle - 90) * (Math.PI / 180));						speedY -= gravity;			//speedX -= inertia;			angle += inertia;			//alpha -= 0.005;					}		override public function kill(){						sound_shell.play();						//Explode			var colors:Array = new Array(0x00ff00, 0x0000ff, 0xffff00, 0x00ffff, 0xff00ff);			var colorID:int = Math.floor(Math.random()*colors.length);			for (var p=0; p<numSpark ; p++){				var spread = ( (360 / numSpark) * p ) + Math.random() * 60;				spark = new Spark(this, colors[colorID],spread)				PunksGame.currentLevel.topLayer.addChild(spark);			}			Level._flash.visible = true;						super.kill()		}				override public function remove(){															super.remove();		}	}}
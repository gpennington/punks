package src.punks {	import flash.display.MovieClip;	import flash.display.Shape;	import flash.events.*	import flash.geom.Point;	import flash.display.Sprite;	import src.core.Game;	public class HUD extends MovieClip{		//Fireworks buttons		public static var buttons:Array = [];				var dragIcon:MovieClip;		var whichIcon;				public static var hudRef;				public static var landedEnemies:MovieClip = new MovieClip();				//PunksGame.slotList		//static var PunksGame.slotList:Array = new Array(15);		//static var Lanes.slotPositions:Array = []; //I can enter these manually for all I care		public function HUD(){						hudRef = this;			//Stage Listeners			addEventListener(Event.ADDED_TO_STAGE, waitForAdded, false, 0, true);			function waitForAdded(e:Event):void	{				removeEventListener(Event.ADDED_TO_STAGE, waitForAdded);				addEventListener(Event.ENTER_FRAME, onFrame);								//Create Firework Buttons				for (var f:int=0; f<Fireworks.list.length; f++){										//if ( Fireworks.list[f].active ){											//Create Button						buttons[f] = new HUDFirework();						buttons[f].x = 25 + (50 * f);						buttons[f].y = 635;						//buttons[f].name = Fireworks.list[f].name;						addChild(buttons[f]);																	//Prepare Button						//Icon						var buttonIcon = null;						switch (Fireworks.list[f].name){							case "shell":								buttonIcon = new ShellLauncherIcon();								break;							case "rocket":								buttonIcon = new RocketLauncherIcon();								break;							case "fountain":								buttonIcon = new FountainLauncherIcon();								break;							case "starcatcher":								buttonIcon = new StarCatcherIcon();								break;							case "maroon":								buttonIcon = new MaroonLauncherIcon();								break;							case "m80":								buttonIcon = new MaroonLauncherIcon();								break;							case "delete":								buttonIcon = new DeleteIcon();								break;							}						buttonIcon.x = 0;//32;						buttonIcon.y = -20;						buttons[f].addChild(buttonIcon);												//Price						buttons[f].text_price.text = Fireworks.list[f].price[0];												//Mask						buttons[f].timerMask.visible = false;												//Active or Not						if ( Fireworks.list[f].active == false){							buttons[f].visible = false;						}												//Attach Event Listeners						buttons[f].addEventListener(MouseEvent.MOUSE_DOWN, startDrag);							//Name it						buttons[f].name = Fireworks.list[f].name;																													//}									}																							function startDrag(e:MouseEvent):void {									whichIcon = Fireworks.list[buttons.indexOf(e.currentTarget)].name;					if ( Fireworks.list[Fireworks.getIndex(whichIcon)].ready ){										switch (whichIcon){							case "shell":								dragIcon = new ShellLauncherIcon(); //This should really be in Fireworks.list... but how?								break;							case "rocket":								dragIcon = new RocketLauncherIcon();								break;							case "fountain":								dragIcon = new FountainLauncherIcon();								break;							case "maroon":								dragIcon = new MaroonLauncherIcon();								break;							case "m80":								dragIcon = new MaroonLauncherIcon();								break;							case "starcatcher":								dragIcon = new  StarCatcherIcon();								break;							case "delete":								dragIcon = new DeleteIcon();								break;						}						addChild(dragIcon);						dragIcon.x = mouseX;						dragIcon.y = mouseY;						dragIcon.alpha = 0.5;							addEventListener(MouseEvent.MOUSE_MOVE, iconDrag);										}				}				addEventListener(MouseEvent.MOUSE_UP, stopDrag, false, 0, true);								function stopDrag(e:MouseEvent):void {					if ( hasEventListener(MouseEvent.MOUSE_MOVE) ){						removeEventListener(MouseEvent.MOUSE_MOVE, iconDrag);						removeChild(dragIcon);						//if near a spot, buy it						if ( Lanes.nearLane() != undefined ){							Lanes.buyFirework(whichIcon, Lanes.nearLane() );							buttons[Fireworks.getIndex(whichIcon)].timerMask.visible = true;							Fireworks.list[Fireworks.getIndex(whichIcon)].ready = false;						}					}				}				function iconDrag(e:MouseEvent):void {					if ( Lanes.nearLane() != undefined ){						dragIcon.x = Lanes.slotPositions[Lanes.nearLane()].x;						dragIcon.y = Lanes.slotPositions[Lanes.nearLane()].y;					}					else{						dragIcon.x = mouseX;						dragIcon.y = mouseY;					}									}								//				//Allowed Enemy Icon//				text_allowed.text = PunksGame.currentLevel.landedEnemies + " / " + PunksGame.currentLevel.allowedEnemies; 								//landedEnemies.graphics.beginFill(0xff0000, 1);				//landedEnemies.graphics.drawCircle( 0,0, 50);//				addChild(landedEnemies);//				trace(PunksGame.currentLevel.allowedEnemies);//				for ( var en:int=0; en<PunksGame.currentLevel.allowedEnemies; en++ ){//					var allowedEnemyIcon:EnemyIcon = new EnemyIcon();//					landedEnemies.addChild(allowedEnemyIcon);//					allowedEnemyIcon.scaleX = allowedEnemyIcon.scaleY = 0.6; //					allowedEnemyIcon.x = 40 * (en+1);//					allowedEnemyIcon.y = 40//				}											}//wfa		}//hud		public function onFrame(e:Event){			//TODO This is about the only thing outside of Paused			//TODO Dont like this if. Should it query static properties maybe?			if ( PunksGame.currentLevel ){				text_allowed.text = PunksGame.currentLevel.landedEnemies + " / " + PunksGame.currentLevel.allowedEnemies; 			}			if ( Game.isPaused != true ){				//Update Overlays				text_score.text = 3000 + ""; 				//Update Info				text_stars.text = "" + Player.stars;								//Update Buttons and Fireworks				for ( var b:int=0; b<Fireworks.list.length; b++){					//If they are "Active", update buttons					//TODO: Really, the HUD class shouldn't be updating Fireworks properties. Make Fireworks should doing that					//if ( Fireworks.list[b].active ){						if ( Fireworks.list[b].ready == false ){							Fireworks.list[b].reloadCounter += 1;							//trace(Fireworks.list[b] + ": " + Fireworks.list[b].reloadCounter );						}						if ( Fireworks.list[b].reloadCounter >= Fireworks.list[b].reload ){							Fireworks.list[b].ready = true;							Fireworks.list[b].reloadCounter = 0;							buttons[b].timerMask.visible = false;						}					//}										}											}		}//onframe	}}